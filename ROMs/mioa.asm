; SIO TEST 1, 2 and 3 FOR MIO BOARD
; Copied from MIO Rev 2 IMSAI manual
; Only SIO test are implemented, no PIO or CRI tests
; This is destined to be assembled in ROM @ 0C000H
; SIO1 is C000H
; SIO2 is C003H
; SIO3 is C006H
; Other change from IMSAI version is that the delay when
; changing front panel in SIO1 is 5 seconds instead of 15

; MIO BOARD CRI INITIALISATION PROGRAM
; ADDRESS DEFINITIONS FOR MIO BOARD
; AS DEFINED IN MIO USER GUIDE - SECTION 1.2
SIO 	EQU 42H
PIO 	EQU 41H
CNT 	EQU 43H
CRI 	EQU 40H
SSPT 	EQU 0FFH 		;SENSE LIGHTS AND SWITCHES
BASA 	EQU 0C000H
; BASB 	EQU 3000H
; BUFR 	EQU 3600H
STACK 	EQU 0C00H
SSAV: 	EQU 0800H

	ORG BASA



;JUMP TABLE FOR ENTRY TO MIO TESTS
		; JMP SS1
		; JMP SIO2

		; JMP SIO1
		; JMP SIO2
		; JMP SIO3
		; JMP BITMARCH
		; JMP PIO1
		; JMP PIO2
		; JMP PIO3
		; JMP CRIWT
		; JMP CRIRT

START:
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP

		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP

		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP

		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP

		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP

		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP

		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP

		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP

		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP

		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP

		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP

		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP

		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP

		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP

		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP

		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP

		JMP START


EMITA:	LXI SP,STACK
		XRA A 			;SET UP CONTROL REG
		OUT CNT
EMITA1:
		MVI A,41H
		CALL SOUT 		;OUTPUT CHAR
		JMP EMITA1


		; ORG 38H
EMITB1:
		MVI A,42H
		CALL SOUT 		;OUTPUT CHAR
		JMP EMITB1

		; ORG 100H

;SIO TEST 1			OUTPUT THE VALUE CONTAINED IN THE
; 					SENSE SWITCRES TO THE SIO PORT. IF AN
; 					INPUT CHARACTER IS READY AND NO INPUT
; 					ERRORS OCCUR DISPLAY THE CHARACTER IN
; 					THE SENSE LIGHTS. IF AN INPUT ERROR
; 					OCCURS, DISPLAY ALL ONES. PAUSE 15
; 					SECONDS EACH TIME THE SWITCHES ARE CHANGED.
SIO1:	LXI SP,STACK
		XRA A 			;SET UP CONTROL REG
		OUT CNT
SIO11:	
		; CALL SSIN 		;GET SENSE SWITCHES
		MVI A,41H
		CALL SOUT 		;OUTPUT CHAR
		CALL SINP 		;TEST INPUT
		JZ SIO1 		;IF NO INPUT READY
		CMA
		OUT SSPT 		;OUTPUT, CHAR OR ERROR FLAG
		JMP SIO11

;SIO TEST 2 		READ INPUT CHARACTERS FROM STO DEVICE
;					IF CHARACTER IS READ WITHOUT ERROR,
;					OUTPUT CHARACTER TO SIO DEVICE. IF AN
;					ERROR OCCURS, IGNORE CHARACTER
SIO2: 	LXI SP,STACK
		XRA A 			;SET CONTROL REG
		OUT CNT
SIO21: 	CALL SINP 		;GET CHAR
		JZ SIO21 		;NONE READY
		JM SIO21 		;ERROR ON INPUT
		CALL SOUT 		;OUTPUT VALID CHAR
		JMP SIO21
;SIO TEST 3			CONTINUOUSLY TRANSMIT: ALL POSSIBLE BIT
;					PATTERN MASKED WITH THE COMPLEMENT OF THE
;					SENSE SWITCHES. CHECK FOR RECEIVE ERRORS
;					AND DISPLAY OFFH IF ANY OCCUR FOLLOWED BY
;					STATUS WITH PE,OE,FE,RRDY AND TRDY IN BITS
;					4 TO 0 RESPECTIVELY. COMPARE RECEIVED CHAR
;					WITH TRANSMITTED CHAR. DISPLAY OFEH IF DIFFERENT
;					FOLLOWED BY TRANSMITTED CHAR AND
;					RECEIVED CHAR. IN NORMAL OPERATION OISPLAY
;					TRANSMITTED CHAR.
SIO3: 	LXI SP,STACK
		XRA A 			;SET CONTROL
		OUT CNT
		MVI C,0 		; ORIGINAL CHAR VALUE
SIO31: 	IN SSPT 		;GET ORIGINAL SENSE SWITCH
		STA SSAV
		CMA 			;FORM CHAR
		ANA C
		INR C 			;SET NEXT VALUE
		MOV D,A 		;SAVE IT FOR COMPARE
		CMA 			;POR PROPER LIGHTS
		OUT SSPT 		;DISPLAY IT
		CMA 			;FOR PROPER VALUE
		CALL SOUT 		;OUTPUT IT
SIO32: 	CALL SINP 		;TEST INPUT
		JZ SIO32 		;IP NONE READY
		JM SIO33 		;ON ERROR
		MOV E,A 		;MASK INPUT
		LDA SSAV
		CMA
		ANA E
		CMP D 			;COMPARE WITH OUTPUT
		JZ SIO31 		;RELOOP IF OK
		MOV E,A
		MVI A,0FEH 		;ERROR PLAG
		CALL DISP 		;DISPLAY TILL SENSE SWITCHES CHANGE
		MOV A,D 		;TRANS CHAR
		CALL DISP
		MOV A,E 		;RECEIVED CHAR
		CALL DISP
		JMP SIO31
SIO33: 	MOV D,A 		;SAVE ERRORS
		MVI A,0FEH 		;ERROR FLAG
		CALL DISP
		MOV A,D 		;STATUS RESULTS
		CALL DISP
		JMP SIO31
;GENERAL UTILITY ROUTINES FOR SIO TEST.
;THIS ROUTINE DISPLAYS TSE VALUE IN A UNTIL
;SENSE SWITCHES ARE CHANGED.
DISP: 	CMA 			;FOR PROPER LIGHTS
		OUT SSPT
		IN SSPT 		;INITIAL SENSE SWITCHES
		MOV B,A
		CALL DLA5 		;WAIT A WHILE
DIS1: 	IN SSPT 		;NEW VALUE?
		XRA B
		JZ DIS1 		;WAIT FOR DIFFERENCE
		RET
;OUTPUT CHARACTER IN A WHEN DEVICE READY.
SOUT: 	MOV B,A 		;WAIT TIL READY
SOUT1: 	IN CNT
		ANI 1
		JZ SOUT1
		MOV A,B
		OUT SIO 		;CHAR OUT
		RET
;INPUT A CHAR WHEN READY. IF AN ERROR
;OCCURS, PUT PE,CE,FE,RRDY,TROY IN 4 TO 0
SINP: 	IN CNT 			;SEE IF READY ON ERROR
		ANI 0AH
		RZ
		XRI 0AH 		;YES, TEST ERROR
		JZ SIN1
		XRI 2 			;SEE IF OLD ERROR PLAG
		RZ 				; IF SO, RETURN
		IN SIO 			;NO ERROR, GET CHAR
		RET
SIN1: 	MVI A,80H 		;GET ERROR BITS
		OUT CNT 		;PARITY ERROR
		IN CNT
		ANI 3
		RLC
		MOV B,A
		MVI A,0C0H 		;FRAMING ERROR
		OUT CNT
		IN CNT
		ANI 8
		RRC
		ADD B
		MOV B,A
		MVI A,40H 		;OVERUN,RRDY AND TRDY
		OUT CNT
		IN CNT
		ANI 0BH
		ADD B
		MOV B,A
		IN SIO 			;CLEAR CHARACTER
		XRA A 			;RESET CONTROL FOR ERROR FLAG
		OUT CNT
		ORI 80H
		MOV A,B
		RET
;INPUT SENSE SWITCHES-DELAY IF DIPPERENT
SSIN:	IN SSPT 		;GET THEM
		MOV B,A
		LDA SSAV 		;COMPARE WITH PAST
		XRA B
		MOV A,B
		RZ
		CALL DLA5 		;DIFFERENT WAIT FOR A WHILE
		; CALL DLA5
		; CALL DLA5
		IN SSPT 		;GET NEW VALUE
		STA SSAV
		RET
;DELAY 5 SECONDS. - REQUIRES 10 MILLION CYCLES (APPROXIMATELY)
DLA5: 	MVI A,0
		MVI C,201
DLA51: 	CALL DONE
		INR C
		JNZ DLA51
		INR A
		JNZ DLA51
		RET
DONE: 	PUSH H 			;TAKE 121 CYCLES
		POP H
		PUSH H
		POP H
		PUSH H
		POP H
		PUSH H
		POP H
		PUSH H
		POP H
		MOV A,A
		RET


BITMARCH:
		MVI A,0FEH  ; Load initial display value (inverted)
LOOP:
		OUT 0FFH    ; Display it
		RLC         ; Rotate the bit left 1 position
		MOV B,A     ; Save it
		IN  0FFH    ; Read the switches for the delay
		INR A       ; Make sure it's greater than zero
		MOV D,A     ; Load it into outer loop counter
LOOP2:
		MVI E,0FFH  ; Load the inner loop counter
LOOP1:
		DCR E       ; Decrement the inner loop counter
		JNZ LOOP1   ; Loop until zero
		DCR D       ; Decrement the outer loop counter
		JNZ LOOP2   ; Loop until zero
		MOV A,B     ; Restore the display value
		JMP LOOP    ; Loop forever

; #### TODO
RAMTEST:
		LXI SP,STACK
		XRA A 			;SET UP CONTROL REG
		OUT CNT
		MVI A,48H
		CALL SOUT
		RET


SS1:
; TEST PROGRAM FOR THE 2651 UART

; SETS UP THE UART FOR 9600 BAUD (INTERNALLY GEN)
;  8 BIT CHARACTERS, 2 STOP BITS, NO PARITY, RTS
;    LOW, DTR LOW, AND THEN ECHOES CHARACTERS

	; assumes System Support 1 is addressed
	; to 50 hex (CompuPro Standard)
	; for different addresses, change "BASE" in equates

BASE	EQU 050H		; base address of System Support 1
DATA	EQU BASE+0CH	; UART data register
STATUS	EQU BASE+0DH	; UART status register
MODE	EQU BASE+0EH	; UART mode register
CMND	EQU BASE+0FH	; UART command register
TBE	EQU 01H		; transmitter buffer empty status bit
RDA	EQU 02H		; receiver data available status bit

; STACK	EQU 0800H

	DI
	LXI SP,STACK	; Stack in RAM

INIT:	MVI A,11101110B	; data for mode register 1
	OUT MODE	; send it
	MVI A,01111110B	; data for mode register 2
	OUT MODE	; send it
	; MVI A,00100111B	; data for command register
	MVI A,00100111B	; data for command register
	OUT CMND	; send it

SS1LOOP:
; GETCHR:	IN STATUS	; read the status register
; 	ANI RDA		; mask out all bits but RDA
; 	JZ GETCHR	; if it's not high, loop
; 	IN DATA		; must be high so read the data
; 	ANI 7FH		; strip off parity bit
; 			; otherwise....
	PUSH PSW	; save the character on the stack

	LDA SSAV
	INR A
	STA SSAV
	OUT SSPT

SNDCHR:
	IN STATUS	; read the status register
	ANI TBE		; mask out all bits but TBE
	JZ SNDCHR	; if it's not high, loop
	POP PSW		; must be high, get character back
	MVI A,41H
	OUT DATA	; and send it
	JMP SS1LOOP	; then repeat the whole thing

		END
